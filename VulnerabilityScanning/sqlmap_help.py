def help():
    print("""
            ___
           __H__  
     ___ ___[(]_____ ___ ___  {1.7.2#stable}
    |_ -| . [.]     | .'| . |   
    |___|_  [']_|_|_|__,|  _|
          |_|V...       |_|    https://sqlmap.org
    
    用法: python3 sqlmap [选项]
    
    选项:
      -h, --help             显示基本帮助信息并退出
      -hh                    显示高级帮助信息并退出
      --version              显示程序版本号并退出
      -v VERBOSE             详细级别: 0-6 (默认 1)
    
      目标:
        至少需要提供以下选项中的一个来定义目标
    
        -u URL, --url=URL    目标URL(例如"http://www.site.com/vuln.php?id=1")
        -d DIRECT            用于直接数据库连接的连接字符串
        -l LOGFILE           从Burp或WebScarab代理日志文件中解析目标
        -m BULKFILE          从文本文件中扫描多个目标
        -r REQUESTFILE       从文件加载HTTP请求
        -g GOOGLEDORK        将Google dork结果作为目标URL处理
        -c CONFIGFILE        从INI配置文件加载选项
    
      请求:
        这些选项可用于指定如何连接目标URL
    
        -A AGENT, --user-agent=AGENT   HTTP用户代理头值
                               
        -H HEADER, --header=HEADER     额外的请求头(例如"X-Forwarded-For: 127.0.0.1")
                               
        --method=METHOD                强制使用给定的HTTP方法(例如PUT)
        --data=DATA                    通过POST发送的数据字符串(例如"id=1")
        --param-del=PARAM_DELIMITER    参数值的分隔符(例如&)
                                
        --cookie=COOKIE                HTTP Cookie头值(例如"PHPSESSID=a8d127e..")
        --cookie-del=COOKIE_DELIMITER  cookie值的分隔符(例如;)
                                
        --live-cookies=LIVE_COOKIES_FILE   用于加载实时Cookie值的文件
                                
        --load-cookies=COOKIES_FILE        包含Netscape/wget格式cookie的文件
                                
        --drop-set-cookie    忽略响应中的Set-Cookie头
        --mobile             通过HTTP用户代理头模拟智能手机
        --random-agent       使用随机选择的HTTP用户代理头值
        --host=HOST          HTTP Host头值
        --referer=REFERER    HTTP Referer头值
        --headers=HEADERS    额外的请求头(例如"Accept-Language: fr\\\\nETag: 123")
        --auth-type=AUTH_TYPE          HTTP认证类型(Basic, Digest, Bearer等) 
                                 
        --auth-cred=AUTH_CREDENTIALS   HTTP认证凭据(用户名:密码)
                                
        --auth-file=AUTH_FILE          HTTP认证PEM证书/私钥文件
                                
        --abort-code=ABORT_CODE        遇到问题的HTTP状态码时中止(例如401)
                                
        --ignore-code=IGNORE_CODE      忽略问题的HTTP状态码(例如401)
                                
        --ignore-proxy       忽略系统默认代理设置
        --ignore-redirects   忽略重定向尝试
        --ignore-timeouts    忽略连接超时
        --proxy=PROXY        使用代理连接目标URL
        --proxy-cred=PROXY_CREDENTIALS    代理身份验证凭据(用户名:密码)
                               
        --proxy-file=PROXY_FILE           从文件加载代理列表
                                
        --proxy-freq=PROXY_FREQ           从给定列表更改代理之间的请求数
                                
        --tor                使用Tor匿名网络
        --tor-port=TOR_PORT  设置Tor代理端口,默认为默认端口
                                 
        --tor-type=TOR_TYPE  设置Tor代理类型(HTTP,SOCKS4或SOCKS5(默认))
                                
        --check-tor          检查Tor是否正常使用
        --delay=DELAY        每次HTTP请求之间的延迟(秒)
        --timeout=TIMEOUT    等待超时连接的秒数(默认为30)
        --retries=RETRIES    连接超时时的重试次数(默认为3)
        --retry-on=RETRY_ON  在内容匹配正则表达式时重试请求(例如"drop")
                                
        --randomize=RANDOM_PARAMETER     随机更改给定参数的值
                                
        --safe-url=SAFE_URL              测试期间经常访问的安全URL地址 
                                
        --safe-post=SAFE_POST_DATA       发送到安全URL的POST数据
                                
        --safe-req=SAFE_REQUEST_FILE     从文件加载安全的HTTP请求
                                
        --safe-freq=SAFE_FREQ            访问安全URL之间的常规请求数
                                
        --skip-urlencode                 跳过有效载荷数据的URL编码
        --csrf-token=CSRF_TOKEN          用于保存CSRF反欺骗令牌的参数
                                
        --csrf-url=CSRF_URL              提取CSRF令牌的URL地址
                                
        --csrf-method=CSRF_METHOD        访问CSRF令牌页面时使用的HTTP方法
                                
        --csrf-data=CSRF_DATA            在访问CSRF令牌页面时发送的POST数据
                                
        --csrf-retries=CSRF_RETRIES      CSRF令牌检索重试次数(默认为0) 
                                 
        --force-ssl          强制使用SSL/HTTPS
        --chunked            使用HTTP分块传输编码的(POST)请求
        --hpp                使用HTTP参数污染方法
        --eval=EVAL_CODE     请求之前评估提供的Python代码(例如import hashlib;id2=hashlib.md5(id).hexdigest())
    
      优化:
        这些选项可用于优化sqlmap的性能
    
        -o                   开启所有优化开关
        --predict-output     预测常见查询输出
        --keep-alive         使用持久的HTTP(S)连接
        --null-connection    检索页面长度,而不需要实际的HTTP响应主体
        --threads=THREADS    最大并发HTTP(S)请求数(默认为1)
    
      注入:
        这些选项可用于指定要测试的参数,提供自定义注入有效载荷和可选的篡改脚本
    
        -p TEST_PARAMETER    可测试的参数
        --skip=SKIP          跳过对给定参数的测试
        --skip-static        跳过对看起来不动态的参数的测试
        --param-exclude=PARAM_EXCLUDE_REGEX       排除不测试的参数的正则表达式(例如"ses")
                                
        --param-filter=PARAM_FILTER               根据位置选择可测试的参数(例如"POST")
                                
        --dbms=DBMS                               强制后端DBMS采用提供的值
        --dbms-cred=DBMS_CREDENTIALS              DBMS认证凭据(用户:密码)
                                
        --os=OS              强制后端DBMS操作系统采用提供的值
        --invalid-bignum     使用大数字使值无效
        --invalid-logical    使用逻辑操作使值无效  
        --invalid-string     使用随机字符串使值无效
        --no-cast            关闭有效载荷转换机制
        --no-escape          关闭字符串转义机制
        --prefix=PREFIX      注入有效载荷前缀字符串
        --suffix=SUFFIX      注入有效载荷后缀字符串
        --tamper=TAMPER      用于修改注入数据的给定脚本
    
    
    
      检测:
        这些选项可用于自定义检测阶段
    
        --level=LEVEL        要执行的测试级别(1-5,默认为1)
        --risk=RISK          要执行的测试风险级别(1-3,默认为1)
        --string=STRING      查询评估为True时要匹配的字符串
        --not-string=NOT_STRING   
                               查询评估为False时要匹配的字符串
        --regexp=REGEXP      查询评估为True时要匹配的正则表达式
        --code=CODE          查询评估为True时要匹配的HTTP代码
        --smart              仅在存在积极启发式时才执行彻底的测试
        --text-only          仅基于文本内容比较页面
        --titles             仅基于标题比较页面
    
      技术:
        这些选项可用于调整特定SQL注入技术的测试
    
        --technique=TECHNIQUES      要使用的SQL注入技术(默认为"BEUSTQ")
                                
        --time-sec=TIME_SEC         延迟DBMS响应的秒数(默认为5) 
                                
        --union-cols=UNION_COLS     测试UNION查询SQL注入的列范围
                                
        --union-char=UNION_CHAR     暴力破解列数的字符
                                
        --union-from=UNION_FROM     UNION查询SQL注入中FROM部分使用的表
                                
        --dns-domain=DNS_DOMAIN     DNS外带渗透攻击使用的域名
                                
        --second-url=SECOND_URL     搜索用于二阶响应的结果页URL
                                
        --second-req=SECOND_REQUEST_FILE     从文件加载二阶HTTP请求
                                
    
      指纹:
        -f, --fingerprint    执行广泛的DBMS版本指纹识别
    
      枚举:
        这些选项可用于枚举后端数据库管理系统的信息、结构和表中的数据
    
        -a, --all            检索所有内容  
        -b, --banner         检索DBMS标识
        --current-user       检索DBMS当前用户
        --current-db         检索DBMS当前数据库
        --hostname           检索DBMS服务器主机名
        --is-dba             检测DBMS当前用户是否是DBA
        --users              枚举DBMS用户
        --passwords          枚举DBMS用户密码散列
        --privileges         枚举DBMS用户权限
        --roles              枚举DBMS用户角色
        --dbs                枚举DBMS数据库
        --tables             枚举DBMS数据库表
        --columns            枚举DBMS数据库表列
        --schema             枚举DBMS方案
        --count              检索表的条目数
        --dump               转储DBMS数据库表条目  
        --dump-all           转储所有DBMS数据库表条目
        --search             搜索列、表和/或数据库名称
        --comments           在枚举期间检查DBMS注释
        --statements         检索在DBMS上运行的SQL语句
        -D DB                要枚举的DBMS数据库
        -T TBL               要枚举的DBMS数据库表
        -C COL               要枚举的DBMS数据库表列
        -X EXCLUDE           不枚举的DBMS数据库标识符
        -U USER              要枚举的DBMS用户
        --exclude-sysdbs     枚举表时排除DBMS系统数据库
        --pivot-column=PIVOT_COLUMN   轴列名称
                                
        --where=DUMP_WHERE    转储表时使用的WHERE条件
        --start=LIMIT_START   检索的第一个转储表条目
        --stop=LIMIT_STOP     检索的最后一个转储表条目
        --first=FIRST_CHAR    要检索的查询输出单词的第一个字符 
        --last=LAST_CHAR      要检索的查询输出单词的最后一个字符
        --sql-query=SQL_QUERY 要执行的SQL语句
                                
        --sql-shell          交互式SQL外壳提示
        --sql-file=SQL_FILE  从给定文件执行SQL语句
                                
    
      暴力破解:
        这些选项可用于运行暴力破解检查
    
        --common-tables      检查常见表的存在
        --common-columns     检查常见列的存在
        --common-files       检查常见文件的存在
    
      用户自定义函数注入:
        这些选项可用于创建自定义用户定义函数
    
        --udf-inject         注入自定义用户定义函数
        --shared-lib=SHARED_LIB   
                                共享库的本地路径
    
      文件系统访问:
        这些选项可用于访问后端数据库管理系统的基础文件系统
    
        --file-read=FILE_READ
                                从后端DBMS文件系统读取文件
        --file-write=FILE_WRITE
                                在后端DBMS文件系统上写入本地文件
        --file-dest=FILE_DEST
                                后端DBMS绝对文件路径用于写入
    
      操作系统访问:
        这些选项可用于访问后端数据库管理系统的基础操作系统
    
        --os-cmd=OS_COMMAND
                                执行操作系统命令
        --os-shell           操作系统shell的交互提示
        --os-pwn             OOB shell、Meterpreter或VNC的一步提示
        --os-smbrelay        OOB shell、Meterpreter或VNC的一步提示
        --os-bof             存储过程缓冲区溢出利用
        --priv-esc           数据库进程用户特权提升
        --msf-path=MSF_PATH  Metasploit框架的本地安装路径
                                
        --tmp-path=TMP_PATH     临时文件目录的远程绝对路径
                                
    
      Windows注册表访问:
        这些选项可用于访问后端数据库管理系统Windows注册表
    
        --reg-read           读取Windows注册表键值
        --reg-add            写入Windows注册表键值数据
        --reg-del            删除Windows注册表键值  
        --reg-key=REGISTRY_KEY   Windows注册表键
                                
        --reg-value=REGISTRY_VALUE    Windows注册表键值
                                
        --reg-data=REGISTRY_DATA      Windows注册表键值数据
                                 
        --reg-type=REGISTRY_TYPE      Windows注册表键值类型
                                
    
      常规:
        这些选项可用于设置一些常规工作参数
    
        -s SESSION_FILE      从存储的(.sqlite)文件加载会话
        -t TRAFFIC_FILE      将所有HTTP流量记录到文本文件中
        --abort-on-empty     在结果为空时中止数据检索
        --answers=ANSWERS    设置预定义答案(例如"quit=N,follow=N")
        --base64=BASE64_PARAMETER   包含Base64编码数据的参数
                                
        --base64-safe        使用URL和文件名安全的Base64字母表(RFC 4648)
        --batch              从不要求用户输入,使用默认行为
        --binary-fields=BINARY_FIELDS   具有二进制值的结果字段(例如"digest")
                                
        --check-internet     在评估目标之前检查互联网连接
        --cleanup            从sqlmap特定的UDF和表中清理DBMS
        --crawl=CRAWL_DEPTH  从目标URL开始爬网  
        --crawl-exclude=CRAWL_EXCLUDE_REGEX   排除爬网的正则表达式页面(例如"logout")
                                
        --csv-del=CSV_DELIMITER               CSV输出中使用的分隔符(默认为",")
                                
        --charset=CHARSET    盲注字符集(例如"0123456789abcdef")
        --dump-file=DUMP_FILE 将转储的数据存储到自定义文件中
                                
        --dump-format=DUMP_FORMAT  转储数据的格式(CSV(默认)、HTML或SQLITE)
                                
        --encoding=ENCODING        数据检索使用的字符编码(例如GBK)
                                
        --eta                为每个输出显示预计到达时间
        --flush-session      清除当前目标的会话文件  
        --forms              解析和测试目标URL上的表单
        --fresh-queries      忽略存储在会话文件中的查询结果
        --gpage=GOOGLE_PAGE   使用指定页码的Google搜索结果
                               
        --har=HAR_FILE       将所有HTTP流量记录到HAR文件中
        --hex                在数据检索期间使用十六进制转换
        --output-dir=OUTPUT_DIRECTORY   自定义输出目录路径
                                
        --parse-errors       解析和显示来自响应的DBMS错误消息
        --preprocess=PREPROCESS_SCRIPT   用于预处理(请求)的给定脚本
                                
        --postprocess=POSTPROCESS_SCRIPT  用于后处理(响应)的给定脚本
                                
        --repair             重新转储具有未知字符标记(?)的条目
        --save=SAVE_CONFIG   将选项保存到INI配置文件中
        --scope=SCOPE        用于过滤目标的正则表达式
        --skip-heuristics    跳过漏洞检测启发式方法
        --skip-waf           跳过WAF/IPS保护的启发式检测  
        --table-prefix=TABLE_PREFIX   用于临时表的前缀(默认为"sqlmap")
                                
        --test-filter=TEST_FILTER     按有效载荷和/或标题选择测试(例如ROW)
                                
        --test-skip=TEST_SKIP         按有效载荷和/或标题跳过测试(例如BENCHMARK)
                                  
        --web-root=WEB_ROOT           Web服务器文档根目录(例如"/var/www")
                                
    
      其他:
        这些选项不属于任何其他类别
    
        -z MNEMONICS         使用简短的助记符(例如"flu,bat,ban,tec=EU")
        --alert=ALERT        发现SQL注入时运行主机操作系统命令
        --beep               提问和/或发现漏洞时产生哔声
        --dependencies       检查缺失的(可选)sqlmap 
        --disable-coloring 禁用控制台输出着色
    
        --list-tampers 显示可用的篡改脚本列表
    
        --no-logging 禁用日志文件记录
    
        --offline 使用脱机模式(仅使用会话数据)
    
        --purge 安全删除sqlmap数据目录的所有内容
    
        --results-file=R.. 多个目标模式下CSV结果文件的位置
    
        --shell 交互式sqlmap shell提示
    
        --tmp-dir=TMPDIR 用于存储临时文件的本地目录
    
        --unstable 调整不稳定连接的选项
        """)
